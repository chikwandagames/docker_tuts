version: '3'
services:
  my-react-app: 
    build: 
      # Because we do not have a Dockerfile, we need to use context: to specify
      # where all the files and folders for this image should be pulled from
      # "." i.e. the current working dir
      context: .
      # Look in the root dir find a file "Dockerfile.dev" and use that to buld the image
      dockerfile: Dockerfile.dev

    # Port mapping
    ports: 
      - "3000:3000"
    # So that we don't need to use the long winded volume -v comand on docker run
    volumes:
      # Ignore node_modules when maping
      - /app/node_modules
      # Map the local root dir "." i.e. frontend to the container root dir /app
      - .:/app
  # Test service, soley for running tests, this spins up a second container, the
  # PROBLEM with this approach is that we don't get access to the terminal for 
  # interaction with the test suit
  my-tests:
    build: 
      context: .
      dockerfile: Dockerfile.dev

    volumes:
      - /app/node_modules
      - .:/app
    # Override the start up command CMD ["npm", "run", "start"] in Dockerfile.dev
    command: ["npm", "run", "test"]




# To run 
# docker-compose up

# For live updating tests, so that if we make changes to App.test.js, changes
# are refleced live in the terminal test suit
# 1. docker-compose up  
#    docker ps, to get container id
#    then execute the next command in the running container
# 2. docker exec -it <container_id> npm run test