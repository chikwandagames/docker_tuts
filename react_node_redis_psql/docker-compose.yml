version: '3'

services: 
  #  Name of services
  my-postgres:
    # Base image to use for this service
    image: 'postgres:latest'
    environment: 
      # postgres_passord is the defalut password for postgres
      - POSTGRES_PASSWORD=postgres_password

  my-redis:
    image: 'redis:latest'
    
  my-server:
    build: 
      # Specify docker file to be used, without specifyin the path to server
      # that is handled by the context
      dockerfile: Dockerfile.dev
      # Specify the dir to look for the Dockerfile.dev file
      context: ./server
    volumes: 
      # Ignore node_modules when maping, 
      # IOW, inside the container don't override this dir
      - /app/node_modules 
      # Map everything in the local server dir to the container ./app root dir 
      # This will work like nodemon
      - ./server:/app
    # Invironment variables, this will be setup in the container at runtime
    environment: 
      # REDIS_HOST=nameOfService
      - REDIS_HOST=my-redis
      # Redis port
      - REDIS_PORT=6379
      - PGUSER=postgres
      # PGHOST=nameOfService
      - PGHOST=my-postgres
      - PGDATABASE=postgres
      # postgres_passord is the defalut password for postgres
      - PGPASSWORD=postgres_password
      - PGPORT=5432

  my-client:
    stdin_open: true
    build: 
      # Use Dockerfile.dev inside ./client dir
      dockerfile: Dockerfile.dev
      context: ./client
    volumes: 
      - /app/node_modules
      - ./client:/app

  my-worker:
    build: 
      dockerfile: Dockerfile.dev
      context: ./worker
    volumes: 
      - /app/node_modules
      - ./worker:/app













# To run 
# docker compose up
